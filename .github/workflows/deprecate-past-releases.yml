name: Deprecate Past Pre-Releases

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deprecate-previous-pre-release-data:
    if: ${{ github.ref == 'refs/heads/latest' && github.repository == 'homebridge/homebridge-config-ui-x' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/

      - name: Deprecate previous pre-release NPM versions
        run: |
          # Read local package version
          LATEST_VERSION=$(jq -r .version package.json)
          echo "Latest version found in package.json: $LATEST_VERSION"
          DEPRECATED_VERSIONS=()
          # Get all beta versions (versions with a hyphen)
          mapfile -t BETA_VERSIONS < <(npm view homebridge-config-ui-x versions --json | jq -r '.[]' | grep -- '-')
          for VERSION in "${BETA_VERSIONS[@]}"; do
            BASE_VERSION="${VERSION%%-*}"
            # Compare base version to latest version using sort -V
            if [ "$(printf "%s\n%s" "$BASE_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" != "$LATEST_VERSION" ]; then
              npm deprecate homebridge-config-ui-x@"$VERSION" "This beta version is deprecated in favor of the latest release."
              echo "- Deprecated version: $VERSION (base: $BASE_VERSION)"
              DEPRECATED_VERSIONS+=("$VERSION")
            else
              echo "- Skipped version: $VERSION (base: $BASE_VERSION)"
            fi
          done
          if [ ${#DEPRECATED_VERSIONS[@]} -eq 0 ]; then
            echo "No versions were deprecated."
          else
            echo "Deprecated versions:"
            for VERSION in "${DEPRECATED_VERSIONS[@]}"; do
              echo "- $VERSION"
            done
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

      - name: Delete previous pre-release GitHub releases
        run: |
          echo "Finding GitHub releases with a hyphen in the tag name..."
          gh release list --limit 100 --json tagName,name --jq '.[] | select(.tagName | test("-"; "i")) | .tagName' | while read -r TAG; do
            echo "Deleting GitHub release: $TAG"
            gh release delete "$TAG" --yes
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete previous pre-release Git tags
        run: |
          echo "Fetching tags from origin..."
          git fetch --tags
          echo "Finding tags with a hyphen in the name..."
          git tag -l "*-*" | while read -r TAG; do
            echo "Deleting tag: $TAG"
            git push origin ":refs/tags/$TAG"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
