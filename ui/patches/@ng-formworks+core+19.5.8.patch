diff --git a/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs b/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs
index 752fe83..af0512a 100644
--- a/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs
+++ b/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs
@@ -19,6 +19,7 @@ import uniqueId from 'lodash/uniqueId';
 import * as i2$1 from 'nxt-sortablejs';
 import { SortablejsModule } from 'nxt-sortablejs';
 import { HttpClient } from '@angular/common/http';
+import ajvKeywords from 'ajv-keywords'

 class Framework {
     constructor() {
@@ -6392,7 +6393,7 @@ class JsonSchemaFormService {
             validateFormats: false,
             strict: false
         };
-        this.ajv = new Ajv2019(this.ajvOptions); // AJV: Another JSON Schema Validator
+        this.ajv = ajvKeywords(new Ajv2019(this.ajvOptions), ['uniqueItemProperties']); // AJV: Another JSON Schema Validator
         this.validateFormData = null; // Compiled AJV function to validate active form's schema
         this.formValues = {}; // Internal form data (may not have correct types)
         this.data = {}; // Output form data (formValues, formatted with correct data types)
@@ -6742,6 +6743,9 @@ class JsonSchemaFormService {
             }
         };
         const parentNode = parentCtxAsSignals.layoutNode();
+        if (parentNode.options.buttonText) {
+            return parentNode.options.buttonText;
+        }
         const parentValues = this.getFormControlValue(parentCtxAsSignals);
         const isArrayItem = (parentNode.type || '').slice(-5) === 'array' && isArray(parentValues);
         const text = JsonPointer.getFirst(isArrayItem && childNode.type !== '$ref'
@@ -7328,7 +7332,7 @@ class CheckboxComponent {
     static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "19.2.6", type: CheckboxComponent, isStandalone: false, selector: "checkbox-widget", inputs: { layoutNode: { classPropertyName: "layoutNode", publicName: "layoutNode", isSignal: true, isRequired: false, transformFunction: null }, layoutIndex: { classPropertyName: "layoutIndex", publicName: "layoutIndex", isSignal: true, isRequired: false, transformFunction: null }, dataIndex: { classPropertyName: "dataIndex", publicName: "dataIndex", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: `
     <label
       [attr.for]="'control' + layoutNode()?._id"
-      [class]="options?.itemLabelHtmlClass || ''">
+      [class]="options?.itemLabelHtmlClass || ' hb-uix-switch'">
       <input *ngIf="boundControl"
         [formControl]="formControl"
         [attr.aria-describedby]="'control' + layoutNode()?._id + 'Status'"
@@ -7355,6 +7359,7 @@ class CheckboxComponent {
       <span *ngIf="options?.title"
         [style.display]="options?.notitle ? 'none' : ''"
         [innerHTML]="options?.title"></span>
+      <span class="hb-uix-slider hb-uix-round"></span>
     </label>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] }); }
 }
 i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImport: i0, type: CheckboxComponent, decorators: [{
@@ -7365,7 +7370,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
                     template: `
     <label
       [attr.for]="'control' + layoutNode()?._id"
-      [class]="options?.itemLabelHtmlClass || ''">
+      [class]="options?.itemLabelHtmlClass || ' hb-uix-switch'">
       <input *ngIf="boundControl"
         [formControl]="formControl"
         [attr.aria-describedby]="'control' + layoutNode()?._id + 'Status'"
@@ -7392,6 +7397,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
       <span *ngIf="options?.title"
         [style.display]="options?.notitle ? 'none' : ''"
         [innerHTML]="options?.title"></span>
+      <span class="hb-uix-slider hb-uix-round"></span>
     </label>`,
                     standalone: false
                 }]
@@ -7440,9 +7446,9 @@ class CheckboxesComponent {
     <div *ngIf="layoutOrientation === 'horizontal'" [class]="options?.htmlClass || ''">
       <label *ngFor="let checkboxItem of checkboxList"
         [attr.for]="'control' + layoutNode()?._id + '/' + checkboxItem.value"
-        [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+        [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="checkbox"
           [attr.required]="options?.required"
           [checked]="checkboxItem.checked"
@@ -7454,6 +7460,7 @@ class CheckboxesComponent {
           [value]="checkboxItem.value"
           (change)="updateValue($event)">
         <span [innerHTML]="checkboxItem.name"></span>
+        <span class="hb-uix-slider hb-uix-round"></span>
       </label>
     </div>

@@ -7462,20 +7469,21 @@ class CheckboxesComponent {
       <div *ngFor="let checkboxItem of checkboxList" [class]="options?.htmlClass || ''">
         <label
           [attr.for]="'control' + layoutNode()?._id + '/' + checkboxItem.value"
-          [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+          [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="checkbox"
             [attr.required]="options?.required"
             [checked]="checkboxItem.checked"
             [class]="options?.fieldHtmlClass || ''"
             [disabled]="controlDisabled"
-            [id]="options?.name + '/' + checkboxItem.value"
+            [id]="'control' + layoutNode()?._id + '/' + checkboxItem.value"
             [name]="checkboxItem?.name"
             [readonly]="options?.readonly ? 'readonly' : null"
             [value]="checkboxItem.value"
             (change)="updateValue($event)">
           <span [innerHTML]="checkboxItem?.name"></span>
+          <span class="hb-uix-slider hb-uix-round"></span>
         </label>
       </div>
     </div>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
@@ -7495,9 +7503,9 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
     <div *ngIf="layoutOrientation === 'horizontal'" [class]="options?.htmlClass || ''">
       <label *ngFor="let checkboxItem of checkboxList"
         [attr.for]="'control' + layoutNode()?._id + '/' + checkboxItem.value"
-        [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+        [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="checkbox"
           [attr.required]="options?.required"
           [checked]="checkboxItem.checked"
@@ -7509,6 +7517,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
           [value]="checkboxItem.value"
           (change)="updateValue($event)">
         <span [innerHTML]="checkboxItem.name"></span>
+        <span class="hb-uix-slider hb-uix-round"></span>
       </label>
     </div>

@@ -7517,20 +7526,21 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
       <div *ngFor="let checkboxItem of checkboxList" [class]="options?.htmlClass || ''">
         <label
           [attr.for]="'control' + layoutNode()?._id + '/' + checkboxItem.value"
-          [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+          [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="checkbox"
             [attr.required]="options?.required"
             [checked]="checkboxItem.checked"
             [class]="options?.fieldHtmlClass || ''"
             [disabled]="controlDisabled"
-            [id]="options?.name + '/' + checkboxItem.value"
+            [id]="'control' + layoutNode()?._id + '/' + checkboxItem.value"
             [name]="checkboxItem?.name"
             [readonly]="options?.readonly ? 'readonly' : null"
             [value]="checkboxItem.value"
             (change)="updateValue($event)">
           <span [innerHTML]="checkboxItem?.name"></span>
+          <span class="hb-uix-slider hb-uix-round"></span>
         </label>
       </div>
     </div>`,
@@ -7997,7 +8007,7 @@ class RadiosComponent {
         [class]="(options?.itemLabelHtmlClass || '') +
           ((controlValue + '' === radioItem?.value + '') ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="radio"
           [attr.aria-describedby]="'control' + layoutNode()?._id + 'Status'"
           [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -8022,7 +8032,7 @@ class RadiosComponent {
           [class]="(options?.itemLabelHtmlClass || '') +
             ((controlValue + '' === radioItem?.value + '') ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="radio"
             [attr.aria-describedby]="'control' + layoutNode()?._id + 'Status'"
             [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -8059,7 +8069,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
         [class]="(options?.itemLabelHtmlClass || '') +
           ((controlValue + '' === radioItem?.value + '') ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="radio"
           [attr.aria-describedby]="'control' + layoutNode()?._id + 'Status'"
           [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -8084,7 +8094,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
           [class]="(options?.itemLabelHtmlClass || '') +
             ((controlValue + '' === radioItem?.value + '') ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="radio"
             [attr.aria-describedby]="'control' + layoutNode()?._id + 'Status'"
             [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -8532,7 +8542,7 @@ class SectionComponent {
         [class]="options?.labelHelpBlockClass || ''"
         [innerHTML]="options?.description"></p>
       </div>
-    </fieldset>`, isInline: true, styles: [".legend{font-weight:700}.expandable>legend:before,.expandable>label:before{content:\"\\25b6\";padding-right:.3em;font-family:auto}.expanded>legend:before,.expanded>label:before{content:\"\\25bc\";padding-right:.2em}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: RootComponent, selector: "root-widget", inputs: ["dataIndex", "layoutIndex", "layout", "isOrderable", "isFlexItem"] }] }); }
+    </fieldset>`, isInline: true, styles: [".legend{font-weight:700}.expandable>legend,.expandable>label,.expanded>legend,.expanded>label{cursor:pointer;}.expandable>legend:before,.expandable>label:before{font-weight:900;font-family:'Font Awesome 6 Free';content:'\\f054';padding-right:.3em;}.expanded>legend:before,.expanded>label:before{font-weight:900;font-family:'Font Awesome 6 Free';content:'\\f078';padding-right:.2em;}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: RootComponent, selector: "root-widget", inputs: ["dataIndex", "layoutIndex", "layout", "isOrderable", "isFlexItem"] }] }); }
 }
 i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImport: i0, type: SectionComponent, decorators: [{
             type: Component,
@@ -8597,7 +8607,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.6", ngImpor
         [class]="options?.labelHelpBlockClass || ''"
         [innerHTML]="options?.description"></p>
       </div>
-    </fieldset>`, standalone: false, styles: [".legend{font-weight:700}.expandable>legend:before,.expandable>label:before{content:\"\\25b6\";padding-right:.3em;font-family:auto}.expanded>legend:before,.expanded>label:before{content:\"\\25bc\";padding-right:.2em}\n"] }]
+    </fieldset>`, standalone: false, styles: [".legend{font-weight:700}.expandable>legend,.expandable>label,.expanded>legend,.expanded>label{cursor:pointer;}.expandable>legend:before,.expandable>label:before{font-weight:900;font-family:'Font Awesome 6 Free';content:'\\f054';padding-right:.3em;}.expanded>legend:before,.expanded>label:before{font-weight:900;font-family:'Font Awesome 6 Free';content:'\\f078';padding-right:.2em;}\n"] }]
         }] });

 class SelectComponent {
@@ -8615,6 +8625,16 @@ class SelectComponent {
         this.options = this.layoutNode().options || {};
         this.selectList = buildTitleMap(this.options.titleMap || this.options.enumNames, this.options.enum, !!this.options.required, !!this.options.flatList);
         this.jsf.initializeControl(this);
+        this.valueChanges = this.formControl.valueChanges.subscribe((change) => {
+            if (change === 'null') {
+                this.formControl.setValue(null);
+            }
+        });
+    }
+    ngOnDestroy() {
+        if (this.valueChanges) {
+            this.valueChanges.unsubscribe();
+        }
     }
     updateValue(event) {
         this.jsf.updateValue(this, event.target.value);
